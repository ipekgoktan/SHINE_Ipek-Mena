// Generated by gencpp from file vision_msgs/ClassifiedObject.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_CLASSIFIEDOBJECT_H
#define VISION_MSGS_MESSAGE_CLASSIFIEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/RegionOfInterest.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct ClassifiedObject_
{
  typedef ClassifiedObject_<ContainerAllocator> Type;

  ClassifiedObject_()
    : header()
    , object_class()
    , confidence(0.0)
    , roi()  {
    }
  ClassifiedObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_class(_alloc)
    , confidence(0.0)
    , roi(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_class_type;
  _object_class_type object_class;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _roi_type;
  _roi_type roi;




  typedef boost::shared_ptr< ::vision_msgs::ClassifiedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::ClassifiedObject_<ContainerAllocator> const> ConstPtr;

}; // struct ClassifiedObject_

typedef ::vision_msgs::ClassifiedObject_<std::allocator<void> > ClassifiedObject;

typedef boost::shared_ptr< ::vision_msgs::ClassifiedObject > ClassifiedObjectPtr;
typedef boost::shared_ptr< ::vision_msgs::ClassifiedObject const> ClassifiedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::ClassifiedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'vision_msgs': ['/home/peggyjean/toms_ws/src/vision_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::ClassifiedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::ClassifiedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::ClassifiedObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0c6fd5ef14e6e190abcffd4343f8c36";
  }

  static const char* value(const ::vision_msgs::ClassifiedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0c6fd5ef14e6e19ULL;
  static const uint64_t static_value2 = 0x0abcffd4343f8c36ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/ClassifiedObject";
  }

  static const char* value(const ::vision_msgs::ClassifiedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header for timestamp info\n\
Header header\n\
string object_class	  	# Detected objects\n\
float32 confidence 		# Confidence for each detected object\n\
sensor_msgs/RegionOfInterest roi 	# Region within frame the object was detected\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
";
  }

  static const char* value(const ::vision_msgs::ClassifiedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_class);
      stream.next(m.confidence);
      stream.next(m.roi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClassifiedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::ClassifiedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::ClassifiedObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_class);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "roi: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.roi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_CLASSIFIEDOBJECT_H
